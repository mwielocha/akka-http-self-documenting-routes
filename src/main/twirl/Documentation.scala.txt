@(title: String, entries: List[RouteDetails])

@paramType(param: Any) = @{
  if(param.toString.isEmpty) "" else {
    scala.util.Try(param.toString.toDouble) match {
      case scala.util.Success(_) => "number"
      case scala.util.Failure(_) => "string"
    }
  }
}

@contentTypeBlock(contentType: String) = @{
  contentType match {
    case "application/json" | "application/hal+json"  => "json"
    case _ => ""
  }
}

@body(contentType: String, content: Option[String]) = @{
  val block = contentTypeBlock(contentType)
  content match {
    case None => "no content"
    case Some(c) => s"```$block\n$c\n```"
  }
}

@row(in: ValueDetails) = { @in.name | @in.required.map(_.toString).getOrElse("") | @{in.`type`.getOrElse(paramType(in.value))} | @in.defaultValue.getOrElse("") | @in.description.getOrElse("") | @in.value }

@anchor(request: RequestDetails) = { [@request.method @request.uri](#@request.id) }

# @title

* [@title](#@{title.toLowerCase})
@for(RouteDetails(request, response, _) <- entries) {
    * @anchor(request) }

@for(RouteDetails(request, response, description) <- entries) {

## @anchor(request)
(@request.contentType)

@if(description.nonEmpty) { @description.get }

@if(request.params.nonEmpty) {
### URL Parameters
Name        | required | type     | default value | description | example value
--- | ---  | --- | --- | --- | ---
@for(param <- request.params) { @row(param)
    }
}

### Request body

@body(request.contentType, request.body)

@if(request.headers.nonEmpty) {
### Request headers
Name        | required | type     | default value | description | example value
--- | ---  | --- | --- | --- | ---
@for(header <- request.headers) { @row(header)
    }
}

### Response @response.statusCode
(@response.contentType)

@body(response.contentType, response.body)
}